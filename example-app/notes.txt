tutorial: https://www.youtube.com/watch?v=ImtZ5yENzgE&ab_channel=freeCodeCamp.org

database connection:
go here: http://localhost/phpmyadmin/index.php?route=/server/databases
make a database
go to .env file line 14 change the db name to the db name u made in xampp
go to the config folder and select database file and change:
go to msql object/array line 14/15 change the name and username to db name and root: 
            'database' => env('DB_DATABASE', 'laravelapp'),
            'username' => env('DB_USERNAME', 'root'),

run migration: php artisan migrate
reset migration: php artisan migrate:reset

refresh migration:
php artisan migrate:refresh
# Refresh the database and run all database seeds...
php artisan migrate:refresh --seed



controller:
Creating a controller: php artisan make:controller <name> -->php artisan make:controller PostsController --resource -->> php artisan:make PostsController
accepts http requests, 
form validation logic, 
user authentication (gets info from a database to check if the credentials match)
input validation(where i.e. numbers should be added are  added)
and sends a response to the user

http request from the front end is recieved and once the data from the databse is retrieved from the model
after that data is sent back to the view

routes name addable (dary)
headers(trav)

You have to use php artisan ui:auth instead of php artisan make:auth . Before using that you have to install new dependencies by calling: 
composer require laravel/ui --dev 
run: php artisan make:auth
npm -v
node -v
npm install
node install

User authentication & registration 
run: composer require laravel/ui --dev 
run: php artisan ui:auth 

make sure node and npm are installed by doing
npm -v
node -v

install npm:
npm install

controller:
php artisan make:controller nameController
or
php artisan make:controller nameController --resource (comes with index,show,edit,update,destroy)

migration:
 php artisan make:migration create_posts_table
 
policy for auth
php artisan make:policy ProfilePolicy -m Profile    -->policy and the model u want to use it for





refreshen van migrations
php artisan migrate:refresh

migration: is a file that holds all the instructions to create itself

model:

Controller:

View:

Owasp10:

Otap:

How to protect against sql injections?


herkansing:
slide aan uit voor posts of gebruikers, diepere validatie, dropdown voor tags.
owasp en otap beter kennen, wat moet je doen in laravel om dit project online te krijgen. 
hoe bescherm je tegen:

sql injecties: By default, Laravel's Eloquent ORM protects against SQL injection by parameterizing queries and using SQL bindings. 
Always remember to use SQL bindings for request data. 
example:
use App\Models\User;
User::where('email', $email)->get();

cross site scripting:
Laravel's Blade templating engine has echo statements {{ }} that automatically 
escape variables using the htmlspecialchars PHP function to protect against XSS attacks.

Cross Site Request Forgery (CSRF)¶
Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, 
or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated.

Open Redirection¶
Open Redirection attacks in themselves are not that dangerous but they enable phishing attacks.

Consider the following code:
